<?xml version="1.0"?>


<item>
	<!-- ключ, по которому будет добавленна вещь в список вещей персонажа -->
	<key>body</key>

	<!-- механика вложеных вещей (ВВ для краткости). Вещь может быть или вложенной, или нет.
	ВВ не создают никакие события ('selfAdded' и т.д.) и не участвуют в проверках условий других событий.
	Другими словами, никакого внешнего влияния на ВВ нет.
	ВВ ведет себя полностью как вещь-владелец. К примеру, если мы скроем владельца, все его ВВ тоже будут скрыты.
	Или же если изменим стиль владельца на "стиль1", все ВВ тоже попробуют сменить стиль на "стиль1".
	То же самое и с другими событиями/состояниями. -->
	<!-- ВНИМАНИЕ! Так же, для стилей ВВ параметры parent, hidelist и actions просто не считываются,
	поэтому задавать их нет смысла.
	-->

	<!-- Для того, что бы сделать вещь вложенной, нужно задать ей параметр <isSubitem>1</isSubitem>. 
	Значение 0 говорит что вещь - не вложенная (по умолчанию). Если параметра <isSubitem></isSubitem> нет, то вещь - не вложенная -->
	<isSubitem>1</isSubitem>

	<!-- Что бы определить ВВ для текущей вещи - используем следующую конструкцию: -->
	<subitems>
		<!-- Для ленивых, если ВВ одна, можно опускать блоки <item></item>, и сразу писать имя вложенной вещи:
		<subitems>item_name</subitems>
		-->
		<item>subitem_name1</item>
		<item>subitem_name2</item>
	</subitems>


	<!-- Ключ, по которому будет использоваться этот объект в других xml файлах -->
	<!-- если его нету, будет использовано имя файла как имя -->
	<!-- <name>item_EXAMPLE</name> --><!-- закоментировано что бы не поощрять людей использовать его -->

	<!-- Стили. Изменяя стиль вещи, меняются все параметры, описанные в стиле.
	Обязательно должен присутсвовать стиль "default". Считается стилем по умолчанию при добавлении вещи -->
	<style name = "default">

		<!-- имя изображения -->
		<frame>body.png</frame>

		<!-- папка с файлом изображения или имя-константа из файла folders.xml -->
		<folder>body</folder>

		<!-- видно или нет эту вещь на экране -->
		<visible>1</visible>

		<!-- высота вещи. или число, или строка-имя с соотв. константой из файла zorders.xml -->
		<zorder>body</zorder>

		<!-- смещение рисунка, точка ( например: 0,0 ). Можно оставить пустым -->
		<shift></shift>

		<!-- преобразования к вещи ( отзеркаливание, например ). Можно оставить пустым. -->
		<transforms>
		<!--
			<transform id="transf_1" >
				<name>flip</name>
				<params>
					<vertical>1</vertical>
				</params>
			</transform>
		-->
		</transforms>

		<!-- имя родителя, к которому привязывается данная вещь.
		Если родительская вещь будет скрыта - текущая вещь так же будет скрыта -->
		<parent></parent>

		<!-- Используется только есть блок с родителем не пуст
		Если данный блок не пуст, вещь будет привязана видимостью к конкретным стилям родителя 
		Если же блок пуст или не объявлен - подходят все стили родителя -->
		<parentStyles>
			<!-- Для ленивых, если стиль один, можно опускать блоки <item></item>, и сразу писать имя стиля родителя:
			<parentStyles>parent_item_style</parentStyles>
			-->
			<item>parent_item_style1</item>
			<item>parent_item_style2</item>
		</parentStyles>

		<!-- механизм ВВ, однако привязанный к стилям: эта ВВ будет добавлена только в текущем стиле, и будет удалена при
			смене текущего стиля -->
		<!-- не забывайте дописать для вложенной вещи аттрибут <isSubitem>1</isSubitem>! -->
		<subitems>
			<!-- Для ленивых, если ВВ одна, можно опускать блоки <item></item>, и сразу писать имя вложенной вещи:
			<subitems>item_name</subitems>
			-->
			<item>subitem_name1</item>
			<item>subitem_name2</item>
		</subitems>

		<!-- тут перечень имен вещей, которые должны всегда скрываться, если добавлена эта вещь -->
		<hidelist>
		<!-- для ленивых и меня, который всегда забывал тут вписывать все эти <item></item>, можно просто написать ключ
			скрываемой вещи. Но только когда вещь - одна! -->
		<!-- например: <hidelist>body</hidelist>

		<!--	это для случая нескольких вещей, или одной, но правильно оформленной
			<item>itemKey</item>
			<item></item>
		-->
		</hidelist>

		<!-- Дает возможность творить фигню в игре из хмл файла. Может быть пустым -->
		<actions>
			<!-- События необходимы для того, что бы в зависимости от одетой на персонаже вещи применять те или иные 
				действия по отношению к другим одетым вещам персонажа -->
			<!-- Может содержать несолько экшенов( <action></action> ) -->
			<action event="selfAdded">
				<!-- Если блок условия выполняется над вещами персонажа, будет выполнен блок результата этого события-->
				<!-- Более подробно о условиях читать в файле action_conditions_example.hxmle -->
				<body>
					<block>
						<condition type="hasItem">
							<actionItem>1</actionItem>
							<name>item_head</name>
							<visible>1</visible>
							<zorder comp="ge">2</zorder>
						</condition>
					</block>
				</body>
				 
				<!-- Блок результат определяет, что будет выполнено, если даное событие оказалось верным -->
				<!-- Описание блока результата смотрите в файле action_results_example.hxmle -->
				<result type="addItem">
					<key>place_to_add</key>
					<name>name_of_item</name>
				</result>
			</action>

		</actions>
	</style>
</item>