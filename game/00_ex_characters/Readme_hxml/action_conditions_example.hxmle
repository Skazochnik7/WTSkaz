<?xml version="1.0"?>

<!-- Описание условия для экшенов.

	Пример:
	<body>
		<block>
			<condition type="hasItem">
				<actionItem>1</actionItem>
				<name>item_head</name>
				<visible>1</visible>
				<zorder comp="e"></zorder
			</condition>
		</block>
	</body>

	Логика срабатывания экшенов:
			В событии может быть несколько блоков (<block></block>). Если ХОТЬ ОДИН блок верен - событие выполнит свой результат
			В блоке может быть несколько условий(<condition></condition>). Блок считается верным, если ВСЕ условия выполнены.

	Параметры условий:
		key - ключ добавления вещи
		name - имя вещи 
		frame -	имя картинки под вещь
		folder - папка с графикой под вещь. Может быть или ключ-слово из базы папок (folders.hxml), или непосредственно путь
		visible	- 1 или 0 - видимость вещи
		zorder - высота вещи
		style -	имя текущего стиля вещи
		actionItem - описание ниже

	Аттрибуты параметров:
		У каждого из выше перечисленных параметров может быть аттрибут comp - метод сравнения аттрибута
		с соотв. аттрибутом проверяемой вещи. Может принимать следующие значения:
		comp =
			"e"		- проверяется на равенство ( от equal ) ( значение по умолчанию )
			"ne"	- проверяется на не равенство ( от not equal )
			"l"		- проверка, является ли значение параметра условия меньше, чем значение параметра вещи ( от lower )
			"le"	- проверка, является ли значение параметра условия меньше или равно значению параметра вещи ( от lower or equal )
			"g"		- проверка, является ли значение параметра условия больше, чем значение параметра вещи ( от greater )
			"ge"	- проверка, является ли значение параметра условия больше или равно значению параметра вещи( от greater or equal )

		!ВНИМАНИЕ
		!НАСТОЯТЕЛЬНО РЕКОМЕНДУЮ СРАВНИВАТЬ ТАКИМ ОБРАЗОМ ТОЛЬКО ЧИСЛОВЫЕ ПАРАМЕТРЫ, СТРОКОВЫЕ ПАРАМЕТРЫ БУДУТ ВЕСТИ СЕБЯ НЕ АДЕКВАТНО

	Параметр actionItem, 1 или 0
		Если actionItem == 1, то будет проверка, является ли вещь с заданными параметрами ( name == item_head, visible == 1 ) той,
		которая вызвала текущее событие ( в данном случае - selfAdded )
		Если actionItem == 0, то будет проверка, является ли вещь с заданными параметрами ( name == item_head, visible == 1 ) той,
		которая НЕ вызвала текущее событие ( в данном случае - selfAdded )

		!ВНИМАНИЕ
		!На это поле не действует задание метода сравнения ( comp="e" и т.д. ). Всегда проверяется на равенство.


	Типы условий: 	hasItem - проверка на то, существует ли вещь с параметрами условия
					missItem - проверка на то, НЕ существует ли вещь с параметрами условия

	Возможные комбинации условий:
		event экшена: selfAdded, selfRemoved 
		тип условия: hasItem, missItem
		механика: сравнивает параметры условия с каждой вещью, которая была в списке до добавления текущей

		event экшена: itemAdded, itemRemoved
		тип условия: hasItem, missItem
		механика: сравнивает параметры условия с только что добавленной/удаленной вещью

		event экшена: itemShown, itemHidden
		тип условия: hasItem, missItem
		механика: сравнивает параметры условия с только что скрытой/отображенной вещью

		event экшена: beforeStyleChange, afterStyleChange
		тип условия: hasItem, missItem
		механика: сравнивает параметры условия вещью, которая сейчас сменит/только что сменила стиль

	ПРИМЕРЫ:

		<action event="selfAdded">
			<body>
				<block>
					<condition type="hasItem">
						<actionItem>1</actionItem>
						<name>item_head</name>
						<visible>1</visible>
					</condition>
				</block>
			</body>
			 
			...
		</action>
		
		<action event="selfAdded">
			<body>
				<block>
					<condition type="hasItem">
						<name>item_body</name>
						<zorder comp="le">10</zorder>
					</params>
					<condition type="hasItem">
						<name>item_dress</name>
					</params>
				</block>
			</body>
			...
		</action>

		<action event="beforeStyleChange">
			<body>
				<block>
					<condition type="missItem">
						<key>dress</key>
						<name>item_dress</name>
						<style>some_dress_style</style>
					</condition>
				</block>
				<block>
					<condition type="hasItem">
						<key>dress</key>
					</condition>
				</block>
			</body>
			...
		</action>
-->