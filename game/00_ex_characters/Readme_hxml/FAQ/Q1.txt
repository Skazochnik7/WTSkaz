ВОПРОС:
а) Гермиона в длинной юбке, без трусиков
б) Юбка меняется на ОЧЕНЬ короткую (видно, что девушка без трусиков), 
в) В волосах появляются ленточки 
г) выражение лица меняется, 
д) все покрывается спермой,
е) Меняется поза, при этом прежнее изображение блузки должно исчезнуть (не подходит под позу), а новое появиться вместо него, при этом сперма на блузке остается (прежняя картинка)
ж) выражение лица меняется (сперма продолжает его покрывать), 
з) сперма исчезает.
е) Гермиона возвращается в состояние б) , но уже в трусиках

А. Что нужно (какие графические файлы, в каком виде), чтобы это можно было отобразить. Допустим ничего не было, что нужно создать и где разместить если создавать с нуля.
Б. Какие структуры создать под эту задачу, что добавить в XML-файлы движка.
В. Какие команды вызывать в коде, чтобы последовательно получить изображения соответствующие шагам от а) до е)


ОТВЕТ:

Предположим, есть стандартная гермиона в обычном для нее одеянии (кофта, юбка, белье)
Начнем разбор полетов по пунктам
а) БОМ-БОМ имена файлов для предметов: юбка - item_skirt, трусики - item_panties
	В данный момент у гермионы с юбкой все ок, нужно убрать трусики. Варианта два, как и в старом подходе:
	1) скрыть трусы -	herView.data().hideItemKey( 'panties' )
					так же, файл с описанием трусиков называется 'item_panties', поэтому мы так же можем сделать
						herView.data().hideItem( 'item_panties' )
	2) удалить предмет с персонажа - 	herView.data().delItemKey( 'panties' )
										herView.data().delItem( 'item_panties' )
										herView.data().delPanties()
	Какие методы лучше использовать? Вам решать, но:
		методы работы с вещью по ключу ( herView.data().blablaKey( 'key') ) - удобно, если мы предполагаем что по этому же ключу могут в будущем быть добавлены новые вещи. К примеру на ключ panties можно налепить как дефолтные трусы, так и какие-нибудь новые (ажурные, к примеру ).
		методы работы с вещью по имени ( herView.data().blabla( 'name' ) ) - удобно, если мы предполагаем что других вещей на этот ключ этой вещи в данный конкретный момент не предвидится. Ибо если на персонаже нет вещи с таким именем - ничего не произойдет. Зато всегда понятно, какую вещь сипользуем и в какой файл смотреть.
		*метод delPanties эквивалентен методу delItemKey( 'panties' ), добавлен в прошлом для удобства

б) Нужно поменять размер юбки. Варианта, как минимум, три:
	1) Удалить старую юбку (delItem(), delItemKey(), delSkirt()), скрыть старую( hideItem(), hideItemKey() 
	2) добавить новый предмет с тем же ключем ( ( <key>skirt</key> ) автоматом заменит старую юбку ) или же с новым ( ( к примеру: <key>new_skirt</key> ) тогда старую юбку надо удалить/скрыть )
	3) изменить стиль текущей юбки ( будет подробнее чуть дальше, пока setStyle() )

	Для пункта 2) - пример описания нового предмета, пусть файл с предметом называется item_skirt_short
	<?xml version="1.0"?>
	<item>
		<key>skirt</key> <!-- ключ либо skirt, что бы заменить старую юбку, или что-то новое (very_short_skirt) -->

		<style name="default">
			<frame>very_short_skirt_file_name.png</frame>
			<folder>clothes</folder> 	<!-- смотри файл folders.hxml, по имени clothes будет подставлен путь к файлу -->
										<!-- Можно вручную задать путь, но слишкаммногабукавак -->
			<zorder>skirt</zorder> 		<!-- смотри файл zorders.hxml, по имени skirt будет подставлена высота отображения файла -->
										<!-- Можно вручную задать высоту, но магические числа - не есть гут -->
		</style>
	</item>

	Тогда для добавления предмета используем:
		herView.data().addItem( 'item_skirt_short' )

	Теперь по пункту 3.
		Если открыть файл item_skirt.hxml, то можем увидеть, что там два блока стиля:
		<?xml version="1.0"?>
		<item>
			<key>skirt</key>

			<style name="default">
				<frame>skirt_normal.png</frame>
				<folder>clothes</folder>
				<visible>1</visible>
				<zorder>skirt</zorder>
			</style>
			<style name="short">
				<frame>skirt_short.png</frame>
				<folder>clothes</folder>
			</style>
		</item>

		Что такое стиль? Стиль - описание сразу нескольких характеристик предмета. Зачем нужны стили? что бы быстро переключатся между заранее определенными наборами параметров для вещи + не плодить множество вещей ( item_skirt_normal, item_skirt_short, item_skirt_ещечутьчуть_short ) и т.д.
		В описании стандартной юбки уже прописать стиль для короткой юбки. - стиль с именем 'short'. В блоке со стилем short определены всего лишь 2 параметра - имя картинки с короткой юбкой и папка, где картинка лежит. 
			НЕ ОПИСАННЫЕ ПАРАМЕТРЫ СТИЛЯ БУДУТ ВЗЯТЫ ИЗ СТИЛЯ default. 
		Так же, еще раз повторю:
			В КАЖДОЙ ВЕЩИ ОБЯЗАТЕЛЬНО ДОЛЖЕН БЫТЬ СТИЛЬ С ИМЕНЕМ default
		К примеру в стиле short высота будет взята из стиля default, и будет равна значению skirt (1000)
		Для переключения между стилями есть следующие методы:
			1) herView.data().setStyleAll( 'style_name' ) - попробует применить стиль style_name ко всем вещам на персонаже.
			2) herView.data().setStyleItem( 'item_name', 'style_name' ) - попробует найти вещь с именем item_name, затем попробует применить стиль style_name к этой вещи
			3) herView.data().setStyleKey( 'key', 'style_name' )  - попробует найти вещь по ключу key и применить к ней стиль style_name
		Если стиль не будет найден у вещи, ничего не будет изменено.

	Тогда, что бы ответить на пункт 2, я бы рекомендовал дописать новый стиль для стандартной юбки ( конечно, если это действительно более короткий вариант стандартной юбки, а не что-то новое ) :
		<style name="very_short">
			<frame>skirt_very_short.png</frame>
		</style>
	положить картинку с короткой юбкой в ту же папку с вещами, и потом вызвать методом
		herView.data().setStyleKey( 'skirt', 'very_short' ) - по ключу лучше, что бы быть более универсальным к другим юбкам, если они будут

в) Создадим файл с ленточками, пусть будет item_ribbon.hxml, положим его картинку в папку misc (опять из файла folders.hxml).
	Кстати, вещи для Гермионы читаются из папки game\00_ex\00_hermione_hxml\items. Там может быть любое кол-во подпапок и файлов с описанием вещей. Читаются все файлы с расширением ".hxml". Туда и положим наш item_ribbon.hxml.
	Так он выглядит:

	<?xml version="1.0"?>
	<item>
		<key>ribbon</key>
		<style name="default">
			<frame>ribbon_default.png</frame>
			<folder>misc</folder>
			<zorder>headwear</zorder> <!-- смотри высоту в zorders.hxml -->
		</style>
	</item>

	и в коде добавляем:
		herView.data().addItem( 'item_ribbon' )

г) Тут все по старому:
	herView.addFaceName( 'face_file.png' ) или привычные
	herView.showQQ(), .showQ() и .hideQ(), .hideQQ()

д) Возьмем к примеру файл item_sperm.hxml, где описаны стандартные варианты спермы, по стилям.
	пусть для рисунка спермы используется файл misc/sperm_02.png, этой картинке соответствует стиль '02' из файла вещи
	Тогда:
	herView.data().addItem( 'item_sperm', '02' )
		( методы addItemXXX ( addItemKey, addItem, addItemSet ) последним параметром принимают имя стиля, с каким добавить вещь. По умолчанию используется имя 'default'. Тут мы сразу применили стиль '02' к предмету-сперме )

е) Тут уже будет магия
	Я не совсем понял, что имеется ввиду под "меняется поза", поэтому предложу такие варианты:
	Вариант 1)
		Пусть под новую позу мы выделим имя "sexy_pose". Тогда мы всем необходимым предметам прописываем новый стиль с именем "sexy_pose" и новой графикой/параметрами:
			<style name="sexy_pose">
				<frame>sexy_pose_for_concrete_item.png</frame>
				...
			</style>
		Далее для всех вещей применяем эту позу:
			herView.data().setStyleAll( 'sexy_pose' )
		Все, все вещи в нужных нам состояниях (даже блузка скрыта, можно сделать задав параметр <visible>0</visible> в новом стиле )
	Вариант 2)
		Пусть как в пункте 1 опишем всем нужным вещам новый стиль. Что бы применять ко всем вещам эти стили, используем
			herView.data().setStyleSet( 'sexy_pose_set', 'sexy_style' )
		Эта функция попробует применить стиль sexy_style ко всем одетым вещам на персонаже из сэта sexy_pose_set.
		Теперь описание сэтов:
			Сэт - набор вещей, файлы с сэтами хранятся для Гермионы в папке game\00_ex\00_hermione_hxml\sets
			Файл с описанием сэта имеет структуру:

			<?xml version="1.0"?>
			<sets>
				<set>
					<item>item_name_for_sexy_pose_set_1</item>
					<item>item_name_for_sexy_pose_set_2</item>
					...
					<item>item_name_for_sexy_pose_set_N</item>
				</set>
			</sets>

			Тут в полях item задаем имя предмета, входящего в сэт.
			Стоит отметить, что есть функции 
				.addItemSet( 'setName' ), 
				.hideItemSet( 'setName'), 
				.showItemSet( 'setName'),
				.delItemSet( 'setName' ),
				.setStyleSet( 'setName' )
			Эти функции получают все вещи из сэта и выполняют соответсвующее их названию действие для каждой вещи из сэта.

	Вариант 3), сложный
		Пусть поза отрисована отдельным файлом. Тогда нужно скрыть блузку при добавлении новой позы.
		Создаем новую вещь item_pose_spec.hxml:

			<?xml version="1.0"?>
			<item>
				<key>pose</key>
				<style name="default">
					<frame>pose_spec.png</frame>
					<folder>pose</folder>
					<zorder>pose</zorder>
					<hidelist> 	<!-- скрываем старую блузку по ключу -->
						<item>dress</item>
					</hidelist>
					<!-- описываем доп действия для этой позы -->
					<actions>
						<action event="selfAdded"> <!-- это действие будет вызвано при добавлении новой позы -->
							<body>
								<block>
									<!-- если блок условий пуст - это действие 100% выполнится -->
								</block>
							</body>
							<result type="addItem">
								<!-- тут мы добавим новую блузку вместо старой, описание файла item_dress_new.hxml ниже -->
								<item>item_dress_new</item>
							</result>
						</action>

						<action event="selfRemoved"> <!-- это действие будет вызвано при удалении новой позы -->
							<body>
								<block>
									<condition type="hasItem">
										<!-- если при удалении позы у нас есть та новая блузка - удалить ее -->
										<name>item_dress_new</name>
									</condition>
								</block>
							</body>

							<result type="removeItem">
								<item>item_dress_new</item>
							</result>
						</action>

					</actions>
				</style>
			</item>
		Графика для этой позы будет взята из картинки pose_spec.png в папке game\00_ex\00_hermione\pose (смотри folders.hxml)

		Описание новой блузки:
			<?xml version="1.0"?>
			<item>
				<key>pose</key>
				<style name="default">
					<frame>dress_new.png</frame>
					<folder>clothes</folder>
					<zorder>dress+1</zorder> <!-- на 1 выше чем высота блузки по умолчанию -->
			</item>
		Графика для этого предмета будет взята из картинки dress_new.png в папке game\00_ex\00_hermione\clothes (смотри folders.hxml)

		Теперь нам нужно добавить эту позу на персонажа:
			herView.data().addItem( 'item_pose_spec' )
		Вуаля! При добавлении позы, старая блузка будет скрыто, на ее место будет добавлена новая. При удалении позы - новая блузка будет удалена вместе с позой, а старая блузка - отобразится
			Удалить позу - 
				herView.data().delPose()
				ИЛИ herView.data().delItem( 'item_pose_spec' )
				ИЛИ herView.data().delItemKey( 'pose' )

ж) Смотри пункт г.

з) Удаляем предмет со спермой:
	herView.data().delItem( 'item_sperm' )
и)
	1)
	 	Сначала нужно добавить трусики. 
			если в пункте мы скрыли предмет - отобразить его:
				herView.data().showItemKey( 'panties' )
			если удалили - добавить:
				herView.data().addItem( 'item_panties' )
		Потом - удалить позу из ж). Тут просто:
				herView.data().delPose()
		Вернуть старую юбку (стилем):
				herView.data().setStyleKey( 'skirt', 'default' )

	2)	Сделать 
				herView.data.saveState() 
			перед пунктом а) ( сохранит состояние вещей персонажа ),
		после пункта з) сделать 
				herView.data().loadState() 
			( вернет нас в состояние персонажа перед пунктом а) )
		Так как мы предположили, что юбка перед а) была длинная - все сделано. 
		Если же юбка перед а) была короткой - тогда дополнительно вернемся в состояние default: 
				herView.data().setStyleKey( 'skirt', 'default' )

Сделано!
That's all, Folks!